from pygame import *
from random import randint
from time import time as timer #импортируем функцию для засекания времени, чтобы интерпретатор не искал эту функцию в pygame модуле time, даём ей другое название сами
#подгружаем отдельные функции для работы со шрифтом
#шрифты и надписи
font.init()
font1 = font.SysFont('Times New Roman', 80)
win = font1.render('YOU WIN!', True, (255, 255, 255))
lose = font1.render('YOU LOSE!', True, (180, 0, 0))
font2 = font.SysFont('Arial', 36)

#нам нужны такие картинки
img_back = 'galaxy.jpg'
img_hero = 'rocket.png'
img_enemy = 'ufo.png'
img_boss = 'boss.png'
img_bullet = 'bullet.png'
img_bullet2 = 'bullet2.png'
img_ast = 'ast.png'
img_enemy2 = 'ufo2.png'
img_bullet3 = 'bullet3.png'

#счётчик
score = 0 #сбито кораблей
goal = 30 #столько кораблей нужно сбить для победы
lost = 0 #пропущено кораблей
max_lost = 30 #проиграли, если пропустили столько
life = 3 #жизни

'''Необходимые классы'''
#класс-родитель для спрайтов
class GameSprite(sprite.Sprite):
    #конструктор класса
    def __init__(self, player_image, player_x, player_y, size_x, size_y, player_speed):
        #Вызываем конструктор класса (Sprite) 
        sprite.Sprite.__init__(self)
        # каждый спрайт должен хранить свойство image - изображение
        self.image = transform.scale(image.load(player_image), (size_x,size_y))
        self.speed = player_speed
        # каждый спрайт должен хранить свойство rect - прямоугольник 
        self.rect = self.image.get_rect()
        self.rect.x = player_x
        self.rect.y = player_y
    #метод, отрисовывающий героя на окне
    def reset(self):
        window.blit(self.image, (self.rect.x, self.rect.y))

#класс игрока
class Player(GameSprite):
    def update(self):
        keys = key.get_pressed() #метод для подключения клавиатуры
        if keys[K_LEFT] and self.rect.x > 5:
            self.rect.x -= self.speed
        if keys[K_RIGHT] and self.rect.x < win_width - 80:
            self.rect.x += self.speed
    #метод "выстрел" (используем место игрока, чтобы создать там пулю)
    def fire(self):
        bullet = Bullet(img_bullet, self.rect.centerx, self.rect.top, 15, 20, -15)
        bullets.add(bullet)
    def fire2(self):
        bullet2 = Bullet(img_bullet2, self.rect.centerx, self.rect.top, 30, 40, -15)
        bullets.add(bullet2)
    def fire3(self):
        bullet3 = Bullet(img_bullet3, self.rect.centerx, self.rect.top, 10, 20, -15)
        bullets.add(bullet3)

#класс спрайта-врага
class Enemy(GameSprite):
    #движение врага
    def update(self):
        self.rect.y += self.speed
        global lost
        #исчезает если дойдет до конца края
        if self.rect.y > win_height:
            self.rect.x = randint(80, win_width - 80)
            self.rect.y = 0
            lost = lost + 1

#класс астероида
class Aster(GameSprite):
    # движение врага
    def update(self):
        self.rect.x += self.speed
        global lost
        #исчезает если дойдет до края экрана
        if self.rect.y > win_height:
            self.rect.x = randint(80, win_width - 80)
            self.rect.y = 0


class Bullet(GameSprite):
    # движение врага
    def update(self):
        self.rect.y += self.speed
        #исчезает если дойдет до края экрана
        if self.rect.y < 0:
            self.kill()

class Boss(GameSprite):
    direction = 'left'
    def update(self):
        if self.rect.x <= 50:
            self.direction == 'right'
        if self.rect.x >= win_width - 500:
            self.direction == 'left'
        
        if self.direction == 'left':
            self.rect.x -= self.speed
        else:
            self.rect.x += self.speed
    def fireboss(self):
        for i in range(1, 3):
            attack = Enemy('Boss.png', self.rect.centerx, self.rect.top,2,70,70)
            bossenemy.add(attack)
    def reset(self):
        window.blit(self.image,(self.rect.x, self.rect.y))
            
#Игровая сцена
win_width = 700
win_height = 500
window = display.set_mode((win_width, win_height))
display.set_caption("SHOOT UP")
background = transform.scale(image.load ("galaxy.jpg"), (win_width, win_height))

#Персонажи игры
player = Player(img_hero, 300, win_height - 115, 100, 100, 15)
boss = Boss(img_boss, 300, win_height - 500, 150, 150, 10)
monsters = sprite.Group()
for i in range(1, 6):
    monster = Enemy(img_enemy, randint(80, win_width - 80), -40, 80, 50, randint(1, 5))
    monsters.add(monster)
monsters2 = sprite.Group()
for i in range(1, 2):
    monster2 = Enemy(img_enemy2, randint(80, win_width - 80), -40, 80, 50, randint(1, 5))
    monsters.add(monster2)
# создание группы спрайтов-астероидов
asteroids = sprite.Group()
for i in range(1, 3):
    asteroid = Aster(img_ast, randint(30, win_width - 30), -40, 80, 50, randint(1, 7))
    asteroids.add(asteroid)

bullets = sprite.Group()
# Переменная "игра закончилась", как только там True, в основном цикле перестают работать спрайты
finish = False
#основной цикл игры:
run  = True #флаг сбрасывается кнопкой закрытия окна

rel_time = False #флаг, отвечающий за перезарядку

num_fire = 0 # переменная для подсчета выстрелов


mixer.init()
#mixer.music.load('space.ogg')
#mixer.music.play()

# Основной цикл игры
game = True
clock = time.Clock()
FPS = 60

while game:
    for e in event.get():
        if e.type == QUIT:
            game = False
        # событие нажатия на пробел: спрайт стреляет
        elif e.type == KEYDOWN:
            if e.key == K_SPACE:
                #проверяем сколько выстрелов сделано и не происходит ли перезарядка
                if num_fire < 5 and rel_time == False:
                    num_fire = num_fire + 1
                    #fire_sound.play()
                    player.fire()

                if num_fire >= 5 and rel_time == False:
                    last_time = timer() # засекаем время, когда это произошло
                    rel_time = True # ставим флаг перезарядки
            elif e.key == K_TAB:
                #проверяем сколько выстрелов сделано и не происходит ли перезарядка
                if num_fire < 5 and rel_time == False:
                    num_fire = num_fire + 1
                    #fire_sound.play()
                    player.fire2()

                if num_fire >= 5 and rel_time == False:
                    last_time = timer() # засекаем время, когда это произошло
                    rel_time = True # ставим флаг перезарядки
            elif e.key == K_MINUS:
                #проверяем сколько выстрелов сделано и не происходит ли перезарядка
                if num_fire < 5 and rel_time == False:
                    num_fire = num_fire + 1
                    #fire_sound.play()
                    player.fire3()

                if num_fire >= 5 and rel_time == False:
                    last_time = timer() # засекаем время, когда это произошло
                    rel_time = True # ставим флаг перезарядки

    if not finish:
        # обновляем фон
        window.blit(background, (0,0))

        #пишем текст на экране
        text = font2.render("Счёт: " + str(score), 1, (255,255,255))
        window.blit(text, (10,20))

        text = font2.render("Пропущено: " + str(lost), 1, (255,255,255))
        window.blit(text, (10,560))
        #производим движения спрайтов
        player.update()
        monsters.update()
        asteroids.update()
        boss.update()
        bullets.update()
        monsters2.update()

        #обновляем их в новом местоположении при каждой итерации цикла
        player.reset()
        monsters.draw(window)
        asteroids.draw(window)
        boss.reset()
        bullets.draw(window)
        monsters2.draw(window)

        #перезарядка
        if rel_time == True:
            now_time = timer() #считываем время

            if now_time - last_time < 3: # пока не пррошло 3 секунд выводим информацию о перезарядке
                reload = font2.render('Wait, reload...', 1, (150,0,0))
                window.blit(reload, (260,460))
            else:
                num_fire = 0 # обнуляем счетчик пуль
                rel_time = False # сбрасываем флаг перезарядки

        #проверка столкновения пули и монстров (и пуля, и монстр при касании исчезают)
        collides = sprite.groupcollide(monsters, bullets, True, True)
        for c in collides:
            #этот цикл повторится столько раз, сколько мностров подбито
            score = score + 1
            monster = Enemy(img_enemy, randint(80, win_width - 80), -40, 80, 50, randint(1, 5))
            monsters.add(monster)
        
        # если спрайт коснулся врага, уменьшается жизнь
        if sprite.spritecollide(player, monsters, False) or sprite.spritecollide(player, asteroids, False):
            sprite.spritecollide(player, monsters, True)
            sprite.spritecollide(player, asteroids, True)
            life = life - 1

        #возможный проигрыш: пропустили слоишком много или герой столкнулся с врагом
        if life == 0 or lost >= max_lost:
            finish = True #проиграли, ставим фон и больше не управляем спрайтами
            window.blit(lose, (200, 200))

        #проверка выигрыша: сколько очков набрали?
        if score >= goal:
            finish = True
            window.blit(win, (200, 200))
        
        #пишем текст на экране
        text = font2.render("Счёт: " + str(score), 1, (255,255,255))
        window.blit(text, (10,20))

        text = font2.render("Пропущено: " + str(lost), 1, (255,255,255))
        window.blit(text, (10,560))

        # задаем разный цвет в зависимости от количества жизней
        if life == 3:
            life_color = (0, 150, 0)
        if life == 2:
            life_color = (150, 150, 0)
        if life == 1:
            life_color = (150, 0, 0)

        text_life = font1.render(str(life), 1, life_color)
        window.blit(text_life, (650, 10))

        display.update()
    #бонус: автоматический перезапуск игры
    else:
            finish = False
            score = 0
            lost = 0
            for b in bullets:
                b.kill()
            for m in monsters:
                m.kill()
            for a in asteroids:
                a.kill()
            
            time.delay(3000)
            for i in range(1, 6):
                monster = Enemy(img_enemy, randint(80, win_width - 80), -40, 80, 50, randint(1, 5))
                monsters.add(monster)
                monsters2 = sprite.Group()
            for i in range(1, 6):
                monster2 = Enemy(img_enemy, randint(80, win_width - 80), -40, 80, 50, randint(1, 5))
                monsters2.add(monster2)

    #цикл срабатывает каждые 0.05 секунд
    time.delay(50)
    
    clock.tick(FPS)
